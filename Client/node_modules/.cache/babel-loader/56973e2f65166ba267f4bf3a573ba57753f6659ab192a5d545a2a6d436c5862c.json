{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/my_house/Client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport ascending from \"./ascending.js\";\nexport default function greatest(values) {\n  var compare = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ascending;\n  var max;\n  var defined = false;\n  if (compare.length === 1) {\n    var maxValue;\n    var _iterator = _createForOfIteratorHelper(values),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var element = _step.value;\n        var value = compare(element);\n        if (defined ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {\n          max = element;\n          maxValue = value;\n          defined = true;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else {\n    var _iterator2 = _createForOfIteratorHelper(values),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _value = _step2.value;\n        if (defined ? compare(_value, max) > 0 : compare(_value, _value) === 0) {\n          max = _value;\n          defined = true;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return max;\n}","map":{"version":3,"names":["ascending","greatest","values","compare","max","defined","length","maxValue","element","value"],"sources":["D:/my_house/Client/node_modules/d3-array/src/greatest.js"],"sourcesContent":["import ascending from \"./ascending.js\";\r\n\r\nexport default function greatest(values, compare = ascending) {\r\n  let max;\r\n  let defined = false;\r\n  if (compare.length === 1) {\r\n    let maxValue;\r\n    for (const element of values) {\r\n      const value = compare(element);\r\n      if (defined\r\n          ? ascending(value, maxValue) > 0\r\n          : ascending(value, value) === 0) {\r\n        max = element;\r\n        maxValue = value;\r\n        defined = true;\r\n      }\r\n    }\r\n  } else {\r\n    for (const value of values) {\r\n      if (defined\r\n          ? compare(value, max) > 0\r\n          : compare(value, value) === 0) {\r\n        max = value;\r\n        defined = true;\r\n      }\r\n    }\r\n  }\r\n  return max;\r\n}\r\n"],"mappings":";AAAA,OAAOA,SAAS,MAAM,gBAAgB;AAEtC,eAAe,SAASC,QAAQ,CAACC,MAAM,EAAuB;EAAA,IAArBC,OAAO,uEAAGH,SAAS;EAC1D,IAAII,GAAG;EACP,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIF,OAAO,CAACG,MAAM,KAAK,CAAC,EAAE;IACxB,IAAIC,QAAQ;IAAC,2CACSL,MAAM;MAAA;IAAA;MAA5B,oDAA8B;QAAA,IAAnBM,OAAO;QAChB,IAAMC,KAAK,GAAGN,OAAO,CAACK,OAAO,CAAC;QAC9B,IAAIH,OAAO,GACLL,SAAS,CAACS,KAAK,EAAEF,QAAQ,CAAC,GAAG,CAAC,GAC9BP,SAAS,CAACS,KAAK,EAAEA,KAAK,CAAC,KAAK,CAAC,EAAE;UACnCL,GAAG,GAAGI,OAAO;UACbD,QAAQ,GAAGE,KAAK;UAChBJ,OAAO,GAAG,IAAI;QAChB;MACF;IAAC;MAAA;IAAA;MAAA;IAAA;EACH,CAAC,MAAM;IAAA,4CACeH,MAAM;MAAA;IAAA;MAA1B,uDAA4B;QAAA,IAAjBO,MAAK;QACd,IAAIJ,OAAO,GACLF,OAAO,CAACM,MAAK,EAAEL,GAAG,CAAC,GAAG,CAAC,GACvBD,OAAO,CAACM,MAAK,EAAEA,MAAK,CAAC,KAAK,CAAC,EAAE;UACjCL,GAAG,GAAGK,MAAK;UACXJ,OAAO,GAAG,IAAI;QAChB;MACF;IAAC;MAAA;IAAA;MAAA;IAAA;EACH;EACA,OAAOD,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}